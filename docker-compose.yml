version: '3.8'

services:
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3307:3306"
    networks:
      - shopnet
    volumes:
      - mysql-data:/var/lib/mysql

  onlineshoprestapi:
    build: .
    container_name: onlineshoprestapi
    depends_on:
      - mysql
    ports:
      - "8090:9004"
    networks:
      - shopnet
    env_file:
      - .env
    volumes:
      - ./logs:/app/src/logs  

    restart:
      always

  redis:
    image: redis:latest
    container_name: redis_container
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - shopnet

  elasticsearch:
    build:
      context: docker/elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./docker/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch-data:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      discovery.type: single-node
    networks:
      - shopnet
    restart: unless-stopped

  kibana:
    build:
      context: docker/elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./docker/elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      - elasticsearch-data:/usr/share/kibana/data:Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
    networks:
      - shopnet
    depends_on:
      - elasticsearch
    restart: unless-stopped

  filebeat:
    build:
      context: docker/elk/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    user: root
    command:
      - -e
      - --strict.perms=false
    volumes:
      - ./docker/elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/var/log/filebeat/service:ro
      - filebeat-logs:/var/log/filebeat
      - filebeat-logs:/app:ro
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}
      BEATS_SYSTEM_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}
    networks:
      - shopnet
    depends_on:
      - elasticsearch

  setup:
    build:
      context: docker/elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./docker/elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./docker/elk/setup/helpers.sh:/helpers.sh:ro,Z
      - ./docker/elk/setup/roles:/roles:ro,Z
      - setup-state:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}
    networks:
      - shopnet
    depends_on:
      - elasticsearch


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./docker/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - alertmanager:alertmanager
    networks:
      - shopnet
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - shopnet
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./docker/alertmanager/:/etc/alertmanager/
    networks:
      - shopnet
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./docker/grafana/config.monitoring
    networks:
      - shopnet
    restart: always      

networks:
  shopnet:

volumes:
  mysql-data:
  redis:
  elasticsearch-data:
  filebeat-logs:
  setup-state:
  prometheus_data:
  grafana_data:
